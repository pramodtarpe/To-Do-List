{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pramod\\\\Desktop\\\\To-Do-List\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport NewTask from './Componets/NewTask';\nimport TaskList from './Componets/TaskList';\nimport TaskHeader from './Componets/TaskHeader/TaskHeader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [toDoList, setToDoList] = useState([{\n    taskTitle: \"Learn React\",\n    taskDaysLeft: \"13\",\n    isMarked: false\n  }]);\n  const [overlay, setOverlay] = useState(false);\n\n  const newTaskHandler = taskObj => {\n    setToDoList(prev => [taskObj, ...prev]);\n  };\n\n  const selectedHandler = taskTitle => {\n    for (let obj of toDoList) {\n      if (obj.taskTitle === taskTitle) {\n        obj.isMarked ^= true;\n      }\n    }\n\n    setToDoList(toDoList);\n  };\n\n  const taskOverlayHandler = val => {\n    setOverlay(val);\n  };\n\n  const deleteHandler = toDoList => {\n    setToDoList(toDoList);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TaskHeader, {\n      onNewTask: taskOverlayHandler,\n      onDeletedMarked: deleteHandler,\n      allTasks: toDoList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), overlay && /*#__PURE__*/_jsxDEV(NewTask, {\n      onSaveNewTask: newTaskHandler,\n      allTasks: toDoList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      onSaveSelected: selectedHandler,\n      allTasks: toDoList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"IsKJEL5Q2vI0gelRdi5Dbm/RhaY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Pramod/Desktop/To-Do-List/src/App.js"],"names":["React","useState","NewTask","TaskList","TaskHeader","App","toDoList","setToDoList","taskTitle","taskDaysLeft","isMarked","overlay","setOverlay","newTaskHandler","taskObj","prev","selectedHandler","obj","taskOverlayHandler","val","deleteHandler"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,UAAP,MAAuB,mCAAvB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,CAAC;AAACO,IAAAA,SAAS,EAAC,aAAX;AAA0BC,IAAAA,YAAY,EAAC,IAAvC;AAA6CC,IAAAA,QAAQ,EAAC;AAAtD,GAAD,CAAD,CAAxC;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMY,cAAc,GAAIC,OAAD,IAAa;AAClCP,IAAAA,WAAW,CAAEQ,IAAI,IAAI,CAACD,OAAD,EAAU,GAAGC,IAAb,CAAV,CAAX;AACD,GAFD;;AAGA,QAAMC,eAAe,GAAIR,SAAD,IAAe;AACrC,SAAI,IAAIS,GAAR,IAAeX,QAAf,EAAwB;AACtB,UAAGW,GAAG,CAACT,SAAJ,KAAkBA,SAArB,EAA+B;AAC7BS,QAAAA,GAAG,CAACP,QAAJ,IAAgB,IAAhB;AACD;AACF;;AACDH,IAAAA,WAAW,CAACD,QAAD,CAAX;AACD,GAPD;;AAQA,QAAMY,kBAAkB,GAAIC,GAAD,IAAS;AAClCP,IAAAA,UAAU,CAACO,GAAD,CAAV;AACD,GAFD;;AAGA,QAAMC,aAAa,GAAId,QAAD,IAAc;AAClCC,IAAAA,WAAW,CAACD,QAAD,CAAX;AACD,GAFD;;AAIA,sBACE;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,SAAS,EAAEY,kBAAvB;AAA2C,MAAA,eAAe,EAAEE,aAA5D;AAA2E,MAAA,QAAQ,EAAEd;AAArF;AAAA;AAAA;AAAA;AAAA,YADF,EAEGK,OAAO,iBAAI,QAAC,OAAD;AAAS,MAAA,aAAa,EAAEE,cAAxB;AAAwC,MAAA,QAAQ,EAAEP;AAAlD;AAAA;AAAA;AAAA;AAAA,YAFd,eAGE,QAAC,QAAD;AAAU,MAAA,cAAc,EAAEU,eAA1B;AAA2C,MAAA,QAAQ,EAAEV;AAArD;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GA7BQD,G;;KAAAA,G;AA+BT,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react';\n\nimport NewTask from './Componets/NewTask';\nimport TaskList from './Componets/TaskList';\nimport TaskHeader from './Componets/TaskHeader/TaskHeader';\n\nfunction App() {\n  const [toDoList, setToDoList] = useState([{taskTitle:\"Learn React\", taskDaysLeft:\"13\", isMarked:false}]);\n  const [overlay, setOverlay] = useState(false);\n\n  const newTaskHandler = (taskObj) => {\n    setToDoList( prev => [taskObj, ...prev]);\n  }\n  const selectedHandler = (taskTitle) => {\n    for(let obj of toDoList){\n      if(obj.taskTitle === taskTitle){\n        obj.isMarked ^= true;\n      }\n    }\n    setToDoList(toDoList)\n  }\n  const taskOverlayHandler = (val) => {\n    setOverlay(val);\n  }\n  const deleteHandler = (toDoList) => {\n    setToDoList(toDoList);\n  }\n\n  return (\n    <div>\n      <TaskHeader onNewTask={taskOverlayHandler} onDeletedMarked={deleteHandler} allTasks={toDoList} />\n      {overlay && <NewTask onSaveNewTask={newTaskHandler} allTasks={toDoList} />}\n      <TaskList onSaveSelected={selectedHandler} allTasks={toDoList} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}